/** Generated from {{file}} - do not edit! **/

package {{package}};

import com.padsterprogramming.projection.model.*;
import com.padsterprogramming.projection.model.impl.*;
import com.padsterprogramming.projection.model.util.Primitives;

// TODO: get functions working!

/** Put all outputs within one outer class. */
public final class {{WrapperClass}} {
  private {{WrapperClass}}() {} // Don't create one of these.

  // PICK: generate into separate files if possible.
{{#types}}
  public static class {{UpperName}} extends StringMapImpl<com.padsterprogramming.projection.model.Type> {
    // Constructor with defaults
    public {{UpperName}}() {
      this({{#fields}}
        {{defaultValue}}, // {{name}}{{/fields}}
        null /* Void ignore */);
    }

    // Constructor with everything provided.
    public {{UpperName}}({{#fields}}
        {{UnobservableType}} {{name}},{{/fields}}
        Void ignore) {
  {{#fields}}    this.set("{{name}}", {{TypeWrapperConstructor}});
  {{/fields}}  }
  {{#fields}}
    // "{{name}}": "{{type}}"
    public {{UnobservableType}} {{name}}() {
      return this.observable{{UpperName}}().get();
    }
    public {{ObservableType}} observable{{UpperName}}() {
      return ({{ObservableType}}) this.get("{{name}}");
    }
{{/fields}}
  }
{{/types}}

}
